# =================================================================
# GitHub Actions Workflow - Frontend CI/CD
# Build, test, package et deploy du frontend Angular
# =================================================================

name: Frontend CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'app-front/**'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches: [main]
    paths:
      - 'app-front/**'
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/frontend

jobs:
  # =================================================================
  # BUILD & TEST
  # =================================================================
  build-and-test:
    name: Build and Test Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: app-front/package-lock.json

      - name: Install dependencies
        run: |
          cd app-front
          npm ci

      - name: Lint code
        run: |
          cd app-front
          npm run lint || true  # Continue si pas de config ESLint

      - name: Run tests
        run: |
          cd app-front
          npm run test:ci

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: app-front/test-results/
          retention-days: 7

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          files: app-front/coverage/cobertura-coverage.xml
          flags: frontend
          fail_ci_if_error: false

      - name: Build production
        run: |
          cd app-front
          npm run build:prod

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: app-front/dist/
          retention-days: 1

  # =================================================================
  # SECURITY SCAN
  # =================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        run: |
          cd app-front
          npm audit --audit-level=high || true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'app-front'
          severity: 'HIGH,CRITICAL'
          exit-code: '0'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # =================================================================
  # BUILD & PUSH DOCKER IMAGE
  # =================================================================
  docker-build-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./app-front
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # =================================================================
  # DEPLOY TO KUBERNETES
  # =================================================================
  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: docker-build-push
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://app.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Set up kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Deploy to Kubernetes
        run: |
          IMAGE_TAG=main-${{ github.sha }}
          kubectl set image deployment/frontend \
            frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG} \
            -n production

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/frontend -n production --timeout=5m

      - name: Verify deployment
        run: |
          kubectl get pods -n production -l app=frontend
